
 ||__TRAVERSAL__//breadth-first traversal
 ||	    ||______//dept-first traversal
 ||     ||______//example breadth-first 
 ||
 ||___ALGORITHM_//dijkstra// chu y cach goi cac mang ten, goi label, degree
 ||          ||_//euler cycle
 ||
 ||___OTHER_____//count the connectivity parts 

// print vertices from index 2 to 6 using bfs

    int count = 0;

    void breadth2(boolean[] en, int i, RandomAccessFile f) throws Exception {
        Queue q = new Queue();
        int r, j;
        q.enqueue(i);
        en[i] = true;
        while (!q.isEmpty()) {
            r = q.dequeue();
            count++;
            if (count >= 2 && count <= 6) {
                fvisit(r, f);
            }
            for (j = 0; j < n; j++) {
                if (!en[j] && a[r][j] > 0) {
                    q.enqueue(j);
                    en[j] = true;
                }
            }
        }
    }

    void breadth2(int k, RandomAccessFile f) throws Exception {
        boolean[] en = new boolean[20];
        int i;
        for (i = 0; i < n; i++) {
            en[i] = false;
        }
        breadth2(en, k, f);
        for (i = 0; i < n; i++) {
            if (!en[i]) {
                breadth2(en, i, f);
            }
        }
    }

// print vertices from index 2 to 7 using dfs
int count=0;
  void depth1(boolean [] visited,int k, RandomAccessFile f) throws Exception {
      count++;
      if (count>=2 && count<=7)
        fvisit(k,f);
    visited[k]=true;
    for(int i=0;i<n;i++) {
      if(!visited[i] && a[k][i]>0) depth1(visited,i,f);
     }
   }
  void depth1(int k, RandomAccessFile f) throws Exception {
    boolean [] visited = new boolean[20];
    int i;
    for(i=0;i<n;i++) visited[i]=false;
    depth1(visited,k,f);
    for(i=0;i<n;i++) 
       if(!visited[i]) depth1(visited,i,f);
   }


// print vertices and its label using dfs
Content of the file f1.txt:
   B G A E F I C H D
   B(1) G(6) A(0) E(4) F(5) I(8) C(2) H(7) D(3)
-------------------
int count = 0;
 void depth1(int k, RandomAccessFile f) throws Exception
   {boolean [] visited = new boolean[20];
    int i;
    for(i=0;i<n;i++) visited[i]=false;
    depth1(visited,k,f);
    for(i=0;i<n;i++) 
       if(!visited[i]) depth1(visited,i,f);
   }
 
 void depth1(boolean[] visited, int k, RandomAccessFile f) throws Exception{
    fvisit1(k, f);
    visited[k] = true;
    for(int i=0;i<n;i++) {
       if(!visited[i] && a[k][i] > 0) depth1(visited,i,f);
    }
  }
 
 void fvisit1(int i, RandomAccessFile f) throws Exception
   {f.writeBytes(" "+v[i]+"("+i+")");
   }

// print vertices and its degree using dfs

Content of the file f1.txt:
   B G A E F I C H D
   B(1) G(2) A(4) E(3) F(3) I(3) C(1) H(2) D(1)
--------------------
int count = 0;
 void depth1(int k, RandomAccessFile f) throws Exception
   {boolean [] visited = new boolean[20];
    int i;
    for(i=0;i<n;i++) visited[i]=false;
    depth1(visited,k,f);
    for(i=0;i<n;i++) 
       if(!visited[i]) depth1(visited,i,f);
   }
 
 void depth1(boolean[] visited, int k, RandomAccessFile f) throws Exception{
    fvisit1(k, f);
    visited[k] = true;
    for(int i=0;i<n;i++) {
       if(!visited[i] && a[k][i] > 0) depth1(visited,i,f);
    }
  }
 
 void fvisit1(int i, RandomAccessFile f) throws Exception
   {f.writeBytes(" "+v[i]+"("+deg(i)+")");
   }
 
 int deg(int i)
   {int s,j;
    s = 0;
    for(j=0;j<n;j++) s += a[i][j];
    s += a[i][i];
    return(s);
   }



//breadth-first traversal
  void breadth(boolean [] visited, int k, RandomAccessFile f) throws Exception{
	GQueue q = new GQueue();
    int r,i;
    boolean [] enqueued = new boolean[20];
    for(i=0;i<n;i++) enqueued[i]=false;
    q.enqueue(k); enqueued[k]=true;
    while(!q.isEmpty())
     {r = q.dequeue();
      if(!visited[r]) {fvisit(r,f);//modifier function fvisit
	  visited[r] = true;}
      for(i=0;i<n;i++)
       {if(!visited[i] && !enqueued[i] && a[r][i]>0) {q.enqueue(i);enqueued[i]=true;}
       }
     }
   }

  void breadth(int  k, RandomAccessFile f) throws Exception{
	boolean [] visited = new boolean[20];
    int i;
    for(i=0;i<n;i++) visited[i]=false;
    breadth(visited,k,f);
    for(i=0;i<n;i++) if(!visited[i]) breadth(visited,i,f);
   }

//breadth first print degree with: A(4) E(3) F(3) G(2) I(3) B(2) C(1) H(2) D(1)
   void fvisitDeg(int i, RandomAccessFile f) throws Exception{
	f.writeBytes(" "+v[i]+"("+deg[i]+")");
   }
//dept-first traversal
  void depth(boolean [] visited,int k, RandomAccessFile f) throws Exception{
	fvisit(k,f);visited[k]=true;
    for(int i=0;i<n;i++)
      {if(!visited[i] && a[k][i]>0) depth(visited,i,f);
      }
   }
  void depth(int k, RandomAccessFile f) throws Exception{
	boolean [] visited = new boolean[20];
    int i;
    for(i=0;i<n;i++) visited[i]=false;
    depth(visited,k,f);
    for(i=0;i<n;i++) 
       if(!visited[i]) depth(visited,i,f);
   }

//dijkstra
    void dijkstra(int fro, int to, RandomAccessFile f) throws Exception {
        int INF = 999; // infinity value
        boolean[] S = new boolean[n]; // kiem tra xem da duyet dinh chua
        int[] d = new int[n]; // luu gia tri duong di ngan nhat tai dinh do
        int[] p = new int[n]; // luu gia tri dinh gan no nhat

        for (int i = 0; i < n; i++) {
            S[i] = false;
            d[i] = a[fro][i];
            p[i] = fro;
        }

        ArrayList<Integer> ss = new ArrayList<>(); // cac dinh duoc lay     
        // them fro vao ss
        S[fro] = true;
        ss.add(fro);

        // Duyet cac dinh, tim min quang duong, them vao tap ss
        int k, t;
        while (true) {
            k = -1;
            t = INF;
            for (int i = 0; i < n; i++) {
                if (S[i] == true) {
                    continue;
                }
                if (d[i] < t) {
                    k = i;
                    t = d[i];
                }
            }
            if (k == -1) {
                return; // no solution            
            }
            S[k] = true; // select k into the set ss
            ss.add(k);
            if (k == to) {
                break;
            }
            // Recalculate d[i]
            for (int i = 0; i < n; i++) {
                if (S[i] == true) {
                    continue;
                }
                if (d[i] > d[k] + a[k][i]) {
                    d[i] = d[k] + a[k][i];
                    p[i] = k;
                }
            }
        }

        // truy nguoc lai cac dinh tu to ve fro
        Stack s = new Stack();
        int x = to;
        while (true) {
            s.push(x);
            if (x == fro) {
                break;
            }
            x = p[x]; // truy nguoc ve dinh lien truoc no
        }

        ArrayList<Integer> pp = new ArrayList<>();
        while (!s.isEmpty()) { // loi tu stack s sang pp
            x = s.pop();
            pp.add(x);
        }
        //pp la mang chua cac dinh(theo so) sau khi thuc hien thuat toan dijkstra (keyword: vertices in shortest path)
        //ss la mang cac dinh(theo so) duoc chon trong qua trinh thuc hien thuan toan dijkstra  (keyword: vertices selected into the set S)
        //muon doi sang dang ten (A, B, ..) thi phai viet v[pp.get(i)] , v[ss.get(i)]
        //d la mang chua label cua cac dinh d[pp.get(i)], d[ss.get(i)], shortest distance: d[ss.get(ss.size()-1)] (keywors; labels)

        f.writeBytes("" + v[pp.get(0)] + "->" + v[pp.get(pp.size() - 1)] + ":" + d[ss.get(ss.size() - 1)]);
        f.writeBytes("\r\n");
       // In ra cac dinh duoc chon lan luot theo thuat toan
        f.writeBytes("" + v[ss.get(ss.size() - 4)] + "-" + d[ss.get(ss.size() - 4)]);
        for (int i = ss.size() - 3; i < ss.size(); i++) {
            f.writeBytes(" " + v[ss.get(i)] + "-" + d[ss.get(i)]);
        }
        f.writeBytes("\r\n");
    }



//find Euler Cycle with v1 is the starting node
public void findEulerCycle(int v1, RandomAccessFile f) throws IOException {
        ArrayList t = new ArrayList();
        Stack s = new Stack();
        int sel = v1;
        s.push(sel);
        while (!s.isEmpty()) {
            int tmp = s.top();
            sel = isolated(tmp);
            if (sel == -1) {//=> tmp la dinh co lap
                tmp = (int) s.pop();
                t.add(tmp);
            } else {
                //s ko la dinh co lap, check la dinh lien ke dau tien
                //dua check vao stack va remoe canh tmp,check
                s.push(sel);
                a[tmp][sel]--;
                a[sel][tmp]--;
            }
        }
        for (int i = 0; i < t.size(); i++) {
            f.writeBytes(" " + v[(int) t.get(i)]);
        }

    }

    int isolated(int v) {
        for (int i = 0; i < n; i++) {
            if (a[v][i] > 0) {
                return i;
            }
        }
        return -1;
    }
//

//count degree of node i
 int deg(int i) {
     int s,j;
     s=0;
     for(j=0;j<n;j++) s += a[i][j];
     s += a[i][i];
     return(s);
  }
  
//check has Isolated vertice
  boolean hasIsolated() {
    for(int i=0;i<n;i++) 
      if(deg(i)==0) return(true);
    return(false);
  }

//check is a connected graph 
  boolean isConnected() {
    boolean [] p = new boolean[n];
    int i,j,r;
    for(i=0;i<n;i++) p[i]=false;
    GStack s = new GStack();
    s.push(0); p[0] = true;
    while(!s.isEmpty()) {
      r = s.pop();
      for(i=0;i<n;i++)
        if(!p[i] && a[r][i]>0) {
          s.push(i); p[i]=true;  
        }  
    }
    for(i=0;i<n;i++)
        if(!p[i]) return(false);
    return(true);
  }
 
//check undirected
  boolean isUnDirected() {
    int i,j;
    for(i=0;i<n;i++)
      for(j=0;j<n;j++)
        if(a[i][j] != a[j][i]) return(false);
    return(true);
  }
  
//check all deg even
  boolean allDegEven() {
    for(int i=0;i<n;i++)
      if(deg(i)%2 == 1) return(false);
    return(true);
  }
  
//check has euler cycle
  boolean hasEulerCycle() {
    if(!hasIsolated() && isUnDirected() && isConnected() && allDegEven())
       return(true);
      else
        return(false);
  }
  

  
/*
declare a stack S of characters (a vertex is labeled by a character)
declare an empty array E (which will contain Euler cycle)
push the vertex X to S
while(S is not empty)
 {ch = top element of the stack S 
  if ch is isolated then remove it from the stack and put it to E
   else
   select the first vertex Y (by alphabet order), which is adjacent
   to ch,push  Y  to S and remove the edge (ch,Y) from the graph   
 }
 the last array E obtained is an Euler cycle of the graph
*/
void EulerCycle(int k, RandomAccessFile f) throws Exception{
	if(!isUndirected() || !isConnected() || !isEvenDegree())
      {f.writeBytes("Conditions are not satisfied\r\n");
       return;
      }
    MyStack  s = new MyStack();
    int [][] b = new int[20][20];
    int [] eu = new int[20]; int m;
    int i,j,r;
    for(i=0;i<n;i++)
      for(j=0;j<n;j++) b[i][j]=a[i][j];
    s.push(k);//Dua dinh k vao Stack
    m = 0;//Ban dau chu trinh chua co phan tu nao
    while(!s.isEmpty())
      {r = s.top();
       i=0;
       while(i<n && b[r][i]==0) i++;//Tim i dau tien de b[r][i]#0
       if(i==n) //r da la dinh co lap, dua  r  vao chu trinh Euler
         {eu[m++] = r; s.pop();}//Lay dinh co lap ra khoi Stack
         else
          {s.push(i);b[r][i]--;b[i][r]--;}//Loai canh (i,r) khoi do thi
      }
    // Display Euler cycle
    for(i=0;i<m;i++) f.writeBytes(v[eu[i]] + "  ");
    f.writeBytes("\r\n");
   }


//check conditions for the existence of Euler’s cycle
 void checkEulerCycle(RandomAccessFile f) throws Exception{
	if(isUndirected())
      f.writeBytes("The graph is undirected.\r\n");
       else
         f.writeBytes("The graph is directed.\r\n");
    if(isConnected())
      f.writeBytes("The graph is connected.\r\n");
       else
         f.writeBytes("The graph is not connected.\r\n");

    if(isEvenDegree())
      f.writeBytes("All vertices have even degree.\r\n");
       else
         f.writeBytes("The graph has a vertex with odd degree.\r\n");
    if(isUndirected() && isConnected() && isEvenDegree())
      f.writeBytes("Conditions for Euler's cycle are satisfied.\r\n");
        else
         f.writeBytes("Conditions for Euler's cycle are not satisfied.\r\n");
   }

//count the connectivity parts 
   public int connectedParts(){ //f123.writeBytes("k = " + k + "\r\n"); 
    boolean [] pushed = new boolean[20];
    boolean cont = false;
    int i, j, k, r;
    for(i=0;i<n;i++) pushed[i]=false;
    MyStack s = new MyStack();
    k=0;
    while(true)
     {s.clear();
      i = 0;
      while(i<n && pushed[i]) i++;
      if(i==n) break;
      s.push(i); pushed[i] = true;
      while(!s.isEmpty())
        {r = s.pop();
         for(i=0;i<n;i++)
          {if(i==r) continue;
           if(!pushed[i] && a[r][i]>0) {s.push(i); pushed[i] = true;}
          }
        }
       k++;
     }
    return(k);
   }
   